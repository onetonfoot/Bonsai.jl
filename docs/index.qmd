# Intro

The following code snippet gets at the essence of the framework

```julia
using Bonsai

const app = App()

function index(stream::HTTP.Stream)
    query = Bonsai.read( stream, Query(name=Union{String, Nothing}))
    name = isnothing(query.name) ? "John Doe" : query.name  
    Bonsai.write(stream, Body("Hi, $name"))
end

function setup_routes(app)
    app.get["/"] = index
end

function run()
    setup_routers(app)
    start(app, port=9091)
end

# run()
```

The package provides abstraction so we use the `HTTP.Stream` IO type to declaratively read and write data by specifying our inputs and outputs as types. Calls to `Bonsai.read` will extract data from the HTTP Request and likewise those to `Bonsai.write` will construct an HTTP response. 

# Features

Some features include:

* Live Reloading (using [Revise](https://timholy.github.io/Revise.jl/stable/))
* WebSockets
* Tight integration with [StructTypes](https://github.com/JuliaData/StructTypes.jl)
* Flexible Middleware
* Automatic OpenAPI Generetation using [JET](https://github.com/aviatesk/JET.jl)

For a more detailed breakdown read the [handlers](handlers.qmd) section or if you prefer to dive in check out the [examples](examples.qmd).

# About

Bonsai aims to be minimalistic and not impose a specific structure on the developer, the API is inspired by [FastAPI](https://fastapi.tiangolo.com/), [Fibre](https://github.com/gofiber/fiber) and [Express](https://expressjs.com/). 
